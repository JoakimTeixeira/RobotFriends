{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","key","SearchBox","searchChange","for","type","placeholder","onChange","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAqBeA,G,MAlBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,kBAAC,WAAD,KACE,6BAASC,UAAU,QACjB,yBACEA,UAAU,WACVC,IAAI,QACJC,IAAG,+BAA0BL,EAA1B,mBAEL,yBAAKG,UAAU,oBACb,wBAAIA,UAAU,cAAcF,GAC5B,uBAAGE,UAAU,eAAeD,QCEvBI,EAZE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,kBAAC,WAAD,KACGA,EAAOC,KAAI,SAAAC,GAAS,IACbT,EAAoBS,EAApBT,GAAIC,EAAgBQ,EAAhBR,KAAMC,EAAUO,EAAVP,MAEhB,OAAO,kBAAC,EAAD,CAAMQ,IAAKV,EAAIA,GAAIA,EAAIC,KAAMA,EAAMC,MAAOA,SCW1CS,G,MAlBG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKT,UAAU,UACb,2BAAOA,UAAU,eAAeU,IAAI,UAClC,+CAEF,2BACEb,GAAG,SACHC,KAAK,SACLE,UAAU,eACVW,KAAK,SACLC,YAAY,cACZC,SAAUJ,OCoCHK,G,wDA7Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXjB,OAAQ,GACRc,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEb,OAAQsB,S,+BAOjC,IAAD,EACyBC,KAAKN,MAA7BjB,EADD,EACCA,OAAQc,EADT,EACSA,YAEVU,EAAiBxB,EAAOyB,QAAO,SAAAC,GACnC,OAAOA,EAAMhC,KAAKiC,cAAcC,SAASd,EAAYa,kBAGvD,OAAsB,IAAlB3B,EAAO6B,OACF,wBAAIjC,UAAU,WAAd,cAGL,kBAAC,WAAD,KACE,0BAAMA,UAAU,QACd,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,gBAAd,gBACA,kBAAC,EAAD,CAAWS,aAAckB,KAAKZ,kBAEhC,6BAASf,UAAU,aACjB,kBAAC,EAAD,CAAUI,OAAQwB,W,GArCdM,cCClBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.54ad52b3.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <Fragment>\n      <article className=\"card\">\n        <img\n          className=\"card-img\"\n          alt=\"robot\"\n          src={`https://robohash.org/${id}?size=250x250`}\n        />\n        <div className=\"card-description\">\n          <h2 className=\"card-title\">{name}</h2>\n          <p className=\"card-detail\">{email}</p>\n        </div>\n      </article>\n    </Fragment>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport Card from \"./Card\";\n\n// Robots is destructed to not have to import \"props\" keyword and later call it as props.robots\nconst CardList = ({ robots }) => {\n  return (\n    <Fragment>\n      {robots.map(user => {\n        let { id, name, email } = user;\n\n        return <Card key={id} id={id} name={name} email={email} />;\n      })}\n    </Fragment>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"search\">\n      <label className=\"search-title\" for=\"search\">\n        <h2>Search robots:</h2>\n      </label>\n      <input\n        id=\"search\"\n        name=\"search\"\n        className=\"search-input\"\n        type=\"search\"\n        placeholder=\"Insert name\"\n        onChange={searchChange}\n      ></input>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Fragment, Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if (robots.length === 0) {\n      return <h1 className=\"loading\">Loading...</h1>;\n    } else {\n      return (\n        <Fragment>\n          <main className=\"main\">\n            <header className=\"header\">\n              <h1 className=\"header-title\">RobotFriends</h1>\n              <SearchBox searchChange={this.onSearchChange} />\n            </header>\n            <section className=\"card-list\">\n              <CardList robots={filteredRobots} />\n            </section>\n          </main>\n        </Fragment>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}